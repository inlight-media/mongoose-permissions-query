{"version":3,"sources":["permissionsQuery.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE;AAC3C,OAAK,EAAE,IAAI;CACZ,CAAC,CAAC;AACH,OAAO,CAAC,SAAS,CAAC,GAAG,kBAAkB,CAAC;;AAExC,SAAS,sBAAsB,CAAC,GAAG,EAAE;AAAE,SAAO,GAAG,IAAI,GAAG,CAAC,UAAU,GAAG,GAAG,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC;CAAE;;AAEjG,IAAI,OAAO,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;AAEhC,IAAI,QAAQ,GAAG,sBAAsB,CAAC,OAAO,CAAC,CAAC;;AAE/C,IAAI,OAAO,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;AAEhC,IAAI,QAAQ,GAAG,sBAAsB,CAAC,OAAO,CAAC,CAAC;;AAE/C,IAAI,iBAAiB,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;;AAEtD,IAAI,kBAAkB,GAAG,sBAAsB,CAAC,iBAAiB,CAAC,CAAC;;AAEnE,SAAS,kBAAkB,CAAC,MAAM,EAAE;AAClC,QAAM,CAAC,OAAO,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;CACpD;;AAED,SAAS,gBAAgB,CAAC,YAAY,EAAE,iBAAiB,EAAE,QAAQ,EAAE;AACnE,MAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;AAC9B,MAAI,CAAC,iBAAiB,CAAC,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,IAAI,0BAA0B,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE;AAClH,QAAI,KAAK,GAAG,IAAI,QAAQ,CAAC,SAAS,CAAC,CAAC,YAAY,CAAC;AAC/C,aAAO,EAAE,4BAA4B;AACrC,iBAAW,EAAE,yCAAyC;KACvD,CAAC,CAAC;AACH,YAAQ,CAAC,KAAK,CAAC,CAAC;AAChB,WAAO;GACR;;AAED,MAAI,MAAM,GAAG,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;;;AAGhD,MAAI,UAAU,GAAG,SAAS,CAAC;AAC3B,MAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE;AAC1D,cAAU,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;AAC1B,YAAQ,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,UAAU,OAAO,EAAE,MAAM,EAAE;AAC5E,UAAI,MAAM,KAAK,QAAQ,CAAC,WAAW,EAAE,EAAE;;AAErC,YAAI,OAAO,CAAC,OAAO,EAAE;AACnB,oBAAU,CAAC,IAAI,CAAC,IAAI,CAAC;AACnB,iBAAK,EAAE;AACL,iBAAG,EAAE,OAAO,CAAC,OAAO;aACrB;WACF,CAAC,CAAC;SACJ,MAAM,IAAI,OAAO,CAAC,OAAO,EAAE;AAC1B,oBAAU,CAAC,IAAI,CAAC,IAAI,CAAC;AACnB,iBAAK,EAAE;AACL,kBAAI,EAAE,OAAO,CAAC,OAAO;aACtB;WACF,CAAC,CAAC;SACJ;OACF,MAAM;;;AAGL,YAAI,OAAO,CAAC,OAAO,EAAE;AACnB,cAAI,UAAU,GAAG,EAAE,CAAC;AACpB,oBAAU,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AACzB,eAAG,EAAE,OAAO,CAAC,OAAO;WACrB,CAAC;AACF,cAAI,WAAW,GAAG,EAAE,CAAC;AACrB,qBAAW,CAAC,MAAM,CAAC,GAAG;AACpB,eAAG,EAAE,OAAO,CAAC,OAAO;WACrB,CAAC;AACF,oBAAU,CAAC,IAAI,CAAC,IAAI,CAAC;AACnB,eAAG,EAAE,CAAC,UAAU,EAAE,WAAW,CAAC;WAC/B,CAAC,CAAC;SACJ,MAAM,IAAI,OAAO,CAAC,OAAO,EAAE;AAC1B,cAAI,UAAU,GAAG,EAAE,CAAC;AACpB,oBAAU,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AACzB,gBAAI,EAAE,OAAO,CAAC,OAAO;WACtB,CAAC;AACF,cAAI,WAAW,GAAG,EAAE,CAAC;AACrB,qBAAW,CAAC,MAAM,CAAC,GAAG;AACpB,gBAAI,EAAE,OAAO,CAAC,OAAO;WACtB,CAAC;AACF,oBAAU,CAAC,IAAI,CAAC,IAAI,CAAC;AACnB,eAAG,EAAE,CAAC,UAAU,EAAE,WAAW,CAAC;WAC/B,CAAC,CAAC;SACJ;OACF;KACF,CAAC,CAAC;GACJ;AACD,SAAO,IAAI,kBAAkB,CAAC,SAAS,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC;GACxD,KAAK,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;CACvC;;AAED,SAAS,0BAA0B,CAAC,MAAM,EAAE;AAC1C,MAAI,MAAM,GAAG,KAAK,CAAC;AACnB,UAAQ,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,OAAO,EAAE;AAClD,QAAI,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,EAAE;AACtC,YAAM,GAAG,IAAI,CAAC;KACf;GACF,CAAC,CAAC;AACH,SAAO,MAAM,CAAC;CACf;AACD,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC","file":"permissionsQuery-compiled.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports['default'] = attachStaticMethod;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _errors = require('errors');\n\nvar _errors2 = _interopRequireDefault(_errors);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _mongooseLibQuery = require('mongoose/lib/query');\n\nvar _mongooseLibQuery2 = _interopRequireDefault(_mongooseLibQuery);\n\nfunction attachStaticMethod(schema) {\n  schema.statics.permissionsQuery = permissionsQuery;\n}\n\nfunction permissionsQuery(defaultQuery, permissionOptions, callback) {\n  var myModule = this.modelName;\n  if (!permissionOptions.fields || !permissionOptions.filter || bothIncludeAndExcludeExist(permissionOptions.filter)) {\n    var error = new _errors2['default'].Http500Error({\n      message: 'Invalid permission options',\n      explanation: 'Input of permission query is not valid.'\n    });\n    callback(error);\n    return;\n  }\n  // for fields\n  var fields = permissionOptions.fields.join(' ');\n\n  // for filter\n  var conditions = undefined;\n  if (!_lodash2['default'].isEmpty(permissionOptions.filter)) {\n    conditions = { $and: [] };\n    _lodash2['default'].each(permissionOptions.filter, function (content, module) {\n      if (module === myModule.toLowerCase()) {\n        // this is its own module\n        if (content.include) {\n          conditions.$and.push({\n            '_id': {\n              $in: content.include\n            }\n          });\n        } else if (content.exclude) {\n          conditions.$and.push({\n            '_id': {\n              $nin: content.exclude\n            }\n          });\n        }\n      } else {\n        // this is a dependency\n        // there are two types of module ref styles. one is singular, another one is plural(array of doc ref)\n        if (content.include) {\n          var arrayOfRef = {};\n          arrayOfRef[module + 's'] = {\n            $in: content.include\n          };\n          var singularRef = {};\n          singularRef[module] = {\n            $in: content.include\n          };\n          conditions.$and.push({\n            $or: [arrayOfRef, singularRef]\n          });\n        } else if (content.exclude) {\n          var arrayOfRef = {};\n          arrayOfRef[module + 's'] = {\n            $nin: content.exclude\n          };\n          var singularRef = {};\n          singularRef[module] = {\n            $nin: content.exclude\n          };\n          conditions.$and.push({\n            $or: [arrayOfRef, singularRef]\n          });\n        }\n      }\n    });\n  }\n  return new _mongooseLibQuery2['default']().select(fields) // select() must be before default query. otherwise the hidden fields from default query will be overwritten by permitted fields\n  .merge(defaultQuery).find(conditions);\n}\n\nfunction bothIncludeAndExcludeExist(filter) {\n  var output = false;\n  _lodash2['default'].each(filter, function (content) {\n    if (content.include && content.exclude) {\n      output = true;\n    }\n  });\n  return output;\n}\nmodule.exports = exports['default'];"]}