{"version":3,"sources":["query-test.js"],"names":[],"mappings":"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","file":"query-test-compiled.js","sourcesContent":["import should from 'should'\nimport mongoose from 'mongoose'\nimport sharedTest from '../shared/permissionsQuery-test'\nimport permissionsQueryPlugin from '../../plugin/permissionsQuery'\n\nconst Schema = mongoose.Schema\nconst ObjectId = Schema.Types.ObjectId\n\n\ndescribe('mongoose-permissions-query:unit:query', () => {\n  // mock env\n  const schema = new Schema({\n    name: String,\n    field1: String,\n    field2: Number,\n    field3: ObjectId,\n    field4: Array,\n    field5: Object,\n    population: { type: ObjectId, ref: 'Association' },\n    associations: [{ type: ObjectId, ref: 'Population' }]\n  })\n  schema.plugin(permissionsQueryPlugin)\n  const Model = mongoose.model('Model', schema)\n  const Association = mongoose.model('Association', schema)\n  const Population = mongoose.model('Population', schema)\n  const doc = new Model({\n    name: 'name',\n    field1: 'field1',\n    field2: 2,\n    field3: new ObjectId,\n    field4: [4, 4, 4, 4],\n    field5: { 5: 5 },\n    population: new ObjectId,\n    associations: [new ObjectId, new ObjectId]\n  })\n\n  sharedTest.permissionsQueryTest({ model: Model })\n\n  it('should exclude banned fields', done => {\n    const query = Model.findOne()\n    const permissionsOptions = {\n      filter: {},\n      fields: ['-field1', '-field2', '-field3']\n    }\n    let error = null\n    const newQuery = Model.permissionsQuery(query, permissionsOptions, err => {\n      error = err\n    })\n    should.equal(error, null)\n    newQuery._fields.should.eql({\n      field1: 0,\n      field2: 0,\n      field3: 0\n    })\n    done()\n  })\n\n  it('should include permitted fields', done => {\n    const query = Model.findOne()\n    const permissionsOptions = {\n      filter: {},\n      fields: ['field3', 'field5']\n    }\n    let error = null\n    const newQuery = Model.permissionsQuery(query, permissionsOptions, err => {\n      error = err\n    })\n    should.equal(error, null)\n    newQuery._fields.should.eql({\n      field3: 1,\n      field5: 1\n    })\n    done()\n  })\n\n  it('should exclude banned documents', done => {\n    const query = Model.findOne()\n    const permissionsOptions = {\n      filter: {\n        model: {\n          exclude: ['1', '2', '3']\n        }\n      },\n      fields: ['*']\n    }\n    let error = null\n    const newQuery = Model.permissionsQuery(query, permissionsOptions, err => {\n      error = err\n    })\n    should.equal(error, null)\n    newQuery._conditions.$and.should.containEql({\n      _id: {\n        '$nin': ['1', '2', '3']\n      }\n    })\n    done()\n  })\n\n  it('should include permitted documents', done => {\n    const query = Model.findOne()\n    const permissionsOptions = {\n      filter: {\n        model: {\n          include: ['1', '2', '3']\n        }\n      },\n      fields: ['*']\n    }\n    let error = null\n    const newQuery = Model.permissionsQuery(query, permissionsOptions, err => {\n      error = err\n    })\n    should.equal(error, null)\n    newQuery._conditions.$and.should.containEql({\n      _id: {\n        '$in': ['1', '2', '3']\n      }\n    })\n    done()\n  })\n\n  it('should exclude banned dependency', done => {\n    const query = Model.findOne()\n    const permissionsOptions = {\n      filter: {\n        population: {\n          exclude: ['1', '2', '3']\n        }\n      },\n      fields: ['*']\n    }\n    let error = null\n    const newQuery = Model.permissionsQuery(query, permissionsOptions, err => {\n      error = err\n    })\n    should.equal(error, null)\n    console.log(newQuery._conditions.$and)\n    newQuery._conditions.$and.length.should.equal(1)\n    newQuery._conditions.$and[0].$or.should.containEql({\n      population: {\n        '$nin': ['1', '2', '3']\n      }\n    })\n    newQuery._conditions.$and[0].$or.should.containEql({\n      populations: {\n        '$nin': ['1', '2', '3']\n      }\n    })\n    done()\n  })\n\n  it('should include permitted dependency', done => {\n    const query = Model.findOne()\n    const permissionsOptions = {\n      filter: {\n        population: {\n          include: ['1', '2', '3']\n        }\n      },\n      fields: ['*']\n    }\n    let error = null\n    const newQuery = Model.permissionsQuery(query, permissionsOptions, err => {\n      error = err\n    })\n    should.equal(error, null)\n    newQuery._conditions.$and[0].$or.should.containEql({\n      population: {\n        '$in': ['1', '2', '3']\n      }\n    })\n    newQuery._conditions.$and[0].$or.should.containEql({\n      populations: {\n        '$in': ['1', '2', '3']\n      }\n    })\n    done()\n  })\n\n  it('should exclude multiple banned dependencies', done => {\n    const query = Model.findOne()\n    const permissionsOptions = {\n      filter: {\n        population: {\n          exclude: ['1', '2', '3']\n        },\n        associations: {\n          include: ['4','5']\n        }\n      },\n      fields: ['*']\n    }\n    let error = null\n    const newQuery = Model.permissionsQuery(query, permissionsOptions, err => {\n      error = err\n    })\n    should.equal(error, null)\n    newQuery._conditions.$and[0].$or.should.containEql({\n      population: {\n        '$nin': ['1', '2', '3']\n      }\n    })\n    newQuery._conditions.$and[0].$or.should.containEql({\n      populations: {\n        '$nin': ['1', '2', '3']\n      }\n    })\n    done()\n  })\n\n  it('should include multiple permitted dependencies', done => {\n    const query = Model.findOne()\n    const permissionsOptions = {\n      filter: {\n        population: {\n          include: ['1', '2', '3']\n        }\n      },\n      fields: ['*']\n    }\n    let error = null\n    const newQuery = Model.permissionsQuery(query, permissionsOptions, err => {\n      error = err\n    })\n    should.equal(error, null)\n    newQuery._conditions.$and[0].$or.should.containEql({\n      population: {\n        '$in': ['1', '2', '3']\n      }\n    })\n    newQuery._conditions.$and[0].$or.should.containEql({\n      populations: {\n        '$in': ['1', '2', '3']\n      }\n    })\n    done()\n  })\n\n  it('should include permitted documents and exclude banned fields')\n  it('should exclude banned documents and include permitted fields')\n  it('should include permitted documents and include permitted fields')\n  it('should exclude banned documents and exclude banned fields')\n  it('should exclude banned documents from an array of population ref')\n  it('should include permitted documents, permitted dependencies and permitted fields')\n  it('should pass with full permissions')\n\n\n  // Error handler. not sure if we need these. If permission module works correctly, these errors will never occur.\n  it('should handle error of input missing properties', done => {\n    const query = Model.findOne()\n    const permissionOptions = {}\n    let err = {}\n    Model.permissionsQuery(query, permissionOptions, error => {\n      err = error\n    })\n    err.message.should.equal('Invalid permission options')\n    done()\n  })\n\n  it('should handle error of having include and exclude at the same time')\n\n\n  // query result test\n  it('should filter documents')\n  it('should filter dependencies')\n  it('should filter dependencies')\n\n})\n"]}